trigger:
- 'master'

variables:
  buildConfiguration: 'Release'
  webrepository: web

stages:
# - stage: 'Build'
#   displayName: 'Build the web application'
#   jobs: 
#   - job: 'Build'
#     displayName: 'Build job'
#     pool:
#       vmImage: 'ubuntu-18.04'
#       demands:
#       - npm

#     variables:
#       wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
#       dotnetSdkVersion: '3.1.300'

#     steps:
#     - task: UseDotNet@2
#       displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
#       inputs:
#         version: '$(dotnetSdkVersion)'

#     - task: Npm@1
#       displayName: 'Run npm install'
#       inputs:
#         verbose: false

#     - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
#       displayName: 'Compile Sass assets'

#     - task: gulp@1
#       displayName: 'Run gulp tasks'

#     - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
#       displayName: 'Write build info'
#       workingDirectory: $(wwwrootDir)

#     - task: DotNetCoreCLI@2
#       displayName: 'Restore project dependencies'
#       inputs:
#         command: 'restore'
#         projects: '**/*.csproj'

#     - task: DotNetCoreCLI@2
#       displayName: 'Build the project - $(buildConfiguration)'
#       inputs:
#         command: 'build'
#         arguments: '--no-restore --configuration $(buildConfiguration)'
#         projects: '**/*.csproj'

#     - task: DotNetCoreCLI@2
#       displayName: 'Publish the project - $(buildConfiguration)'
#       inputs:
#         command: 'publish'
#         projects: '**/*.csproj'
#         publishWebProjects: false
#         arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
#         zipAfterPublish: true

#     - publish: '$(Build.ArtifactStagingDirectory)'
#       artifact: drop

- stage: BuildDocker
  displayName: 'Build on Docker'
  jobs:
    - job: 'DockerBuild'
      displayName: 'Job Build on Docker'
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
        - task: Docker@2
          displayName: Login to ACR
          inputs:
            command: buildAndPush
            containerRegistry: 'Container registry service connection'
            buildContext: $(Build.Repository.LocalPath)
            repository: $(webrepository)
            tags: '$(Build.BuildId)'
            Dockerfile: $(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile #  '**/Dockerfile'

# - stage: 'Deploy'
#   displayName: 'Deploy the web application'
#   dependsOn: Build
#   jobs:
#   - deployment: Deploy
#     pool:
#       vmImage: 'ubuntu-18.04'
#     environment: spike
#     variables:
#     - group: Release
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop
#           - task: AzureWebApp@1
#             displayName: 'Azure App Service Deploy: website'
#             inputs:
#               azureSubscription: 'Resource Manager - Tailspin - Space Game'
#               appName: '$(WebAppName)'
#               appType: webAppLinux
#               package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.Web.zip'

- stage: 'DeployContainer'
  displayName: 'Deploy the container'
  dependsOn: BuildDocker
  jobs:
    - job: 'DeployContainerjob'
      displayName: 'Deploy Container'
      pool:
        vmImage: 'ubuntu-18.04'
      variables:
        - group: Release
      steps:
        - task: AzureWebAppContainer@1
          displayName: 'Deploy to azure web app container'
          inputs:
            appName: $(webAppName)
            azureSubscription: 'space-game-acr-azurerm-connection'
            imageName: $(RegistryName)/$(webrepository):$(build.buildId)

